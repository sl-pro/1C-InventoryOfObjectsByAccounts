//Заполнение документа Инвентаризация товаров по произвольному выбранному счету для БП 3.0
//Автор: Лукьяненко Станислав
//Инфостарт: https://infostart.ru/public/1017704/
//E-mail: s-l-mail@yandex.ru
//Телефон: +79232124100 (Telegram, Viber, WhatsApp)
//Skype: lukyan11

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает сведения о внешней обработке.
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.1.3.1");
	
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта();
	ПараметрыРегистрации.Версия = "1.1";
	ПараметрыРегистрации.Назначение.Добавить("Документ.ИнвентаризацияТоваровНаСкладе");
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "Заполнить по остаткам на складе (с выбором счета)";
	НоваяКоманда.Идентификатор = "БПЗаполнениеОбъектаИнвентаризацияПоСчету";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовКлиентскогоМетода();
	НоваяКоманда.ПоказыватьОповещение = Истина;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ВедетсяУчетПоФизлицам(Счет)

	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);

	УчетПоФизлицам = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;

	Возврат УчетПоФизлицам;

КонецФункции 

Функция ВедетсяУчетПоСкладам(Счет)

	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);

	УчетПоСкладам = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;

	Возврат УчетПоСкладам;

КонецФункции 

Процедура ДобавитьОтборПоСубконто(ВедетсяУчет, СтрокаЗамены, ЗначениеОтбора, НомерСубконто, МассивСубконто, ВидСубконто, ИмяПараметра)
	
	Если Не ВедетсяУчет Или Не ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		Возврат;
	КонецЕсли;
	
	НомерСубконто = НомерСубконто + 1;
	МассивСубконто.Добавить(ВидСубконто);
	СтрокаЗамены = СтрокаЗамены + " И " + "Субконто" + НомерСубконто + " = &" + ИмяПараметра;

КонецПроцедуры

Функция ПолучитьОстаткиНаСкладе(ВходящиеПараметры) Экспорт
	
	ОтветственноеЛицо 	= ВходящиеПараметры.ОтветственноеЛицо;
	Дата 				= ВходящиеПараметры.Дата;
	Организация 		= ВходящиеПараметры.Организация;
	Счет 				= ВходящиеПараметры.Счет;
	Склад 				= ВходящиеПараметры.Склад;
	
	Запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	               |	ХозрасчетныйОстатки.Счет КАК СчетУчета,
	               |	СУММА(ХозрасчетныйОстатки.КоличествоОстаток) КАК Количество,
	               |	СУММА(ХозрасчетныйОстатки.КоличествоОстаток) КАК КоличествоУчет,
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |			КОГДА ЕСТЬNULL(СУММА(ХозрасчетныйОстатки.КоличествоОстаток), 0) > 0
	               |				ТОГДА СУММА(ХозрасчетныйОстатки.СуммаОстаток) / ЕСТЬNULL(СУММА(ХозрасчетныйОстатки.КоличествоОстаток), 0)
	               |			ИНАЧЕ 0
	               |		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Цена,
	               |	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК Сумма,
	               |	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК СуммаУчет,
	               |	ХозрасчетныйОстатки.Счет.Порядок КАК Порядок,
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОстатки.Субконто1 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Номенклатура).Наименование
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК ПорядокНаименование
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &Счет, &Субконто, Организация В (&Организация)) КАК ХозрасчетныйОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОстатки.Счет,
	               |	ХозрасчетныйОстатки.Счет.Порядок,
	               |	ХозрасчетныйОстатки.Субконто1,
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОстатки.Субконто1 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Номенклатура).Наименование
	               |		ИНАЧЕ "" ""
	               |	КОНЕЦ
	               |
	               |ИМЕЮЩИЕ
	               |	ЕСТЬNULL(СУММА(ХозрасчетныйОстатки.КоличествоОстаток), 0) > 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок,
	               |	ПорядокНаименование";
	#КонецОбласти
	
	Субконто = Новый Массив;
	Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	НомерСубконто = 1;
	СтрокаПоиска = "Организация В (&Организация)";
	СтрокаЗамены = СтрокаПоиска;
	
	ПВХ = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные;
	
	ДобавитьОтборПоСубконто(ВедетсяУчетПоСкладам(Счет), СтрокаЗамены, Склад, НомерСубконто, Субконто, ПВХ.Склады, "Склад");
	ДобавитьОтборПоСубконто(ВедетсяУчетПоФизлицам(Счет), СтрокаЗамены, ОтветственноеЛицо, НомерСубконто, Субконто, ПВХ.РаботникиОрганизаций, "ОтветственноеЛицо");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, СтрокаПоиска, СтрокаЗамены);
	
	Запрос.УстановитьПараметр("КонецПериода",	 	Новый Граница(Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("Счет",	 			Счет);
	Запрос.УстановитьПараметр("Склад",	 			Склад);
	Запрос.УстановитьПараметр("ОтветственноеЛицо", 	ОтветственноеЛицо);
	Запрос.УстановитьПараметр("Субконто", 			Субконто);
	
	Результат = Запрос.Выполнить();
	Товары = Результат.Выгрузить();
	Товары.Колонки.Удалить("Порядок");
	Товары.Колонки.Удалить("ПорядокНаименование");
	
	Возврат Товары;

КонецФункции
